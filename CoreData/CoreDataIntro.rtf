{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 .AppleSystemUIFontMonospaced-Regular;}
{\colortbl;\red255\green255\blue255;\red140\green148\blue165;}
{\*\expandedcolortbl;;\cssrgb\c61569\c64706\c70588;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Core Data and SwiftUI\
\
New project (with nothing)\
- add data model\
- add company (cmd + s)\
- add PersistenceController\
- inject viewContext into environment\
\
import SwiftUI\
\
@main\
struct CoreDataIntroApp: App \{\
    let persistenceController = PersistenceController.shared\
    \
    var body: some Scene \{\
        WindowGroup \{\
            ContentView()\
                .environment(\\.managedObjectContext, persistenceController.viewContext)\
        \}\
    \}\
\}\
\
- Pull it out in our ContentView\
\
\pard\pardeftab720\sl394\partightenfactor0

\f1 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 struct ContentView: View \{\
    @Environment(\\.managedObjectContext) private var viewContext\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \

\fs48 Create a company
\fs24 \
\
\pard\tx741\pardeftab741\pardirnatural\partightenfactor0
\cf0 @State private var companyName: String = ""\
\
TextField("Company name", text: $companyName)\
   .textFieldStyle(.roundedBorder)\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 HStack\
\
\pard\tx741\pardeftab741\pardirnatural\partightenfactor0
\cf0 Button(action: addCompany) \{\
   Label("", systemImage: "plus")\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
    private func addCompany() \{\
        withAnimation \{\
            let newCompany = Company(context: viewContext)\
            newCompany.name = companyName\
            PersistenceController.shared.saveContext()\
        \}\
    \}\
\pard\tx741\pardeftab741\pardirnatural\partightenfactor0
\cf0 \
\}.padding()\
\
Would like this to appear near the top, so I am going to embed in a VStack.\
\
VStack \{\
   HStack \{\
\
Then the trick to get everything to the top is to add one of these Spacers().\
\
Run the app! Can add companies. Just can see them. Let\'92s fix that.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs48 \cf0 View saved companies
\fs24 \
\
- Add the fetchRequest\
\
@FetchRequest(\
        sortDescriptors: [NSSortDescriptor(keyPath: \\Company.name, ascending: true)],\
        animation: .default)\
    private var companies: FetchedResults<Company>\
\
List \{\
  ForEach(companies) \{ company in\
    Text(company.name ?? "")\
  \}.onDelete(perform: deleteCompany)\
\}\
\
private func deleteCompany(offsets: IndexSet) \{\
  withAnimation \{\
    offsets.map \{ companies[$0] \}.forEach(viewContext.delete)\
      PersistenceController.shared.saveContext()\
    \}\
\}\
\
Run the app. See your companies!\
Show delete.\
\

\fs48 Load data in previews
\fs24 \
\
Need to inject our special previews viewContext.\
\
ContentView().environment(\\.managedObjectContext,\
 PersistenceController.preview.container.viewContext)\
\
\
    static var preview: PersistenceController = \{\
        let result = PersistenceController(inMemory: true)\
        let viewContext = result.container.viewContext\
\
        // Companies\
        let newCompany = Company(context: viewContext)\
        newCompany.name = "Apple"\
\
        shared.saveContext()\
        \
        return result\
    \}()\
\
\
Load your preview. Will now see company data.\
\
\

\fs48 Update
\fs24 \
\
Going to create a new view to update our company name.\
\
UpdateView\
\
Three step process.\
1.Add @StateObject to change state and refresh the view\
2. Update our view to receive a company as an observable object.\
2. Convert out text view into a NavigationLink.\
3. Embed in a navigationView\
4. Do our actual update in the new view.\
\
Add @StateObject\
\
struct UpdateView: View \{\
    \
    @StateObject var company: Company\
\
Update our preview\
\
struct UpdateView_Previews: PreviewProvider \{\
    static var previews: some View \{\
        let viewContext = PersistenceController.preview.container.viewContext\
        let newCompany = Company(context: viewContext)\
        newCompany.name = "Apple"\
                \
        return UpdateView(company: newCompany)\
            .environment(\\.managedObjectContext, PersistenceController.preview.container.viewContext)\
    \}\
\}\
\
We are going to update our company name by providing a textfield to edit, and then show update below.\
\
    @State private var companyName: String = ""\
    \
    var body: some View \{\
        VStack \{\
            HStack \{\
                TextField("Update company name", text: $companyName)\
                    .textFieldStyle(.roundedBorder)\
                Button(action: updateCompany) \{\
                    Label("", systemImage: "arrowshape.turn.up.left")\
                \}\
            \}.padding()\
            Text(company.name ?? "")\
            Spacer()\
        \}\
    \}\
    \
    private func updateCompany() \{\
        withAnimation \{\
            company.name = companyName\
            PersistenceController.shared.saveContext()\
        \}\
    \}\
\
Show SF Symbols - where you got arrow shape.\
Test out in previews - point out how nice SwiftUI is for doing this.\
\
Now we need to pass that company down to this view from parent.\
Going to convert into a NavigationLink.\
\
Return to parent view. And comment out this text.\
\
                ForEach(companies) \{ company in\
//                    Text(company.name ?? "")\
                \}.onDelete(perform: deleteCompany)\
\
Going to replace with \
\
NavigationLink(destination: CompanyDetail(company: company)) \{\
  Text(company.name ?? "")\
\}\
\
Note how this changes the view of our company text. Adds a chevon.\
Run and see how doesn\'92t link.\
Need to embed in NavigationView.\
Test in preview.\
\
Add title\
\
VStack \{\
\
\}.navigationTitle("Companies") \
\
Run and demo!\
\
Congratulations! You now know\'85\
Come back next time and see how we can add employees to our companies and setup 1-many relationships.\
\
Thanks for coming!\
\
\
}