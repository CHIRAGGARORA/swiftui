{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 .AppleSystemUIFontMonospaced-Regular;}
{\colortbl;\red255\green255\blue255;\red140\green148\blue165;}
{\*\expandedcolortbl;;\cssrgb\c61569\c64706\c70588;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab741
\pard\tx741\pardeftab741\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Demo what you are going to build\
Demo where we left off.\
Start by creating 1-many.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab741\pardirnatural\partightenfactor0

\f1 \cf2 \expnd0\expndtw0\kerning0
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab741\pardirnatural\partightenfactor0

\f0\fs48 \cf0 \kerning1\expnd0\expndtw0 Add employee to data model
\fs24 \
\
\pard\tx741\pardeftab741\pardirnatural\partightenfactor0
\cf0 - create the 1-many relationship in data model between company and employee\
- explain bidirectional nature\
\
- Employee name String\
- company Company No Inverse Options - To One\
\
- Company\
- employees Employee company (now inverse is there) Option - To Many\
\
Cmd + S to save\
\
OK - we are good to go. All we need to do now is build the UI and we are done.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab741\pardirnatural\partightenfactor0

\fs48 \cf0 Attempt to List all employees in a company
\fs24 \
\pard\tx741\pardeftab741\pardirnatural\partightenfactor0
\cf0 \
- Create a new view called Employees\
\
import SwiftUI\
\
struct CompanyDetail: View \{\
    @Environment(\\.managedObjectContext) private var viewContext\
    \
    @StateObject var company: Company\
    @State private var employeeName: String = ""\
    \
    var body: some View \{\
        VStack \{\
            HStack \{\
                TextField("Employee name", text: $employeeName)\
                    .textFieldStyle(.roundedBorder)\
                Button(action: addEmployee) \{\
                    Label("", systemImage: "plus")\
                \}\
            \}.padding()\
            \
            List \{\
                ForEach(company.employees) \{ employee in\
                    Text(employee.name ?? "")\
                \}.onDelete(perform: deleteEmployee)\
            \}\
        \}.navigationTitle(company.name ?? "Unknown")\
    \}\
    \
    private func addEmployee() \{\
        withAnimation \{\
            let newEmployee = Employee(context: viewContext)\
            newEmployee.name = employeeName\
            \
            company.addToEmployees(newEmployee)\
            PersistenceController.shared.saveContext()\
        \}\
    \}\
    \
    func deleteEmployee(at offsets: IndexSet) \{\
        withAnimation \{\
            for index in offsets \{\
                let employee = company.employeesArray[index]\
                viewContext.delete(employee)\
                PersistenceController.shared.saveContext()\
            \}\
        \}\
    \}\
\}\
\
struct CompanyDetail_Previews: PreviewProvider \{\
    static var previews: some View \{\
        let viewContext = PersistenceController.preview.container.viewContext\
        let newCompany = Company(context: viewContext)\
        newCompany.name = "Apple"\
        \
        let employee1 = Employee(context: viewContext)\
        employee1.name = "Jobs"\
        \
        let employee2 = Employee(context: viewContext)\
        employee2.name = "Woz"\
        \
        newCompany.addToEmployees(employee1)\
        newCompany.addToEmployees(employee2)\
        \
        return CompanyDetail(company: newCompany)\
            .environment(\\.managedObjectContext, PersistenceController.preview.container.viewContext)\
    \}\
\}\
\
\
- Show the problem - Cannot convert value of type NSSet to Array\
- Core Data doesn't represent 1-many as array types - they are sets\
- We need arrays to work with SwiftUI - what do we do\
\
Donkey Kong challenge\
\

\fs48 Manual Generation to the rescue
\fs24 \
\
- explain the x3 types of CodeGen core data does behind the scenes \
- mention video link for more in the show notes\
\
Company CodeGen - manual\
Employee CodeGen - manual\
\
Editor > Create NSManagedObject subclass\
\
Create CoreData folder\
\
Show\
    @NSManaged public var name: String?\
    @NSManaged public var employees: NSSet?\
\
We can take these and modify them\
\
Employee\
\
    public var unwrappedName: String \{\
        name ?? "Unknown name"\
    \}\
\
Company\
\
    @NSManaged public var name: String?\
    @NSManaged public var employees: NSSet?\
\
    public var unwrappedName: String \{\
        name ?? "Unknown name"\
    \}\
\
    public var employeesArray: [Employee] \{\
        let employeeSet = employees as? Set<Employee> ?? []\
        \
        return employeeSet.sorted \{\
            $0.unwrappedName < $1.unwrappedName\
        \}\
    \}\
\
Now with that we can return to our view and update using employeesArray and unwrappedName\
\
Run in preview\
Run in simulator\
\
Create Apple > Add employees > Delete\
Restart App - show all still there.\
\
Learnings\
- SwiftUI likes arrays so convert NSSet > Array through manual CodeGen\
- CoreData relationshp are bidirectional (don't forget to add both ways)\
\
Bonus\
\

\fs48 Putting App Into Background
\fs24 \
\
Real world apps get put into the background - to ensure partially changed work gets saved to this.\
\
Goto App.swift\
\
@Environment(\\.scenePhase) var scenePhase\
\
\
.onChange(of: scenePhase) \{ _ in\
            persistenceController.saveContext()\
\}\
\
\
Big Trouble in Little China - All in the reflexes\
\
Wrap\
\
\
\
\
\
\
\
}